! function(t, n) { "object" == typeof exports && "object" == typeof module ? module.exports = n(require("THREE")) : "function" == typeof define && define.amd ? define(["THREE"], n) : "object" == typeof exports ? exports.ThreeDxf = n(require("THREE")) : t.ThreeDxf = n(t.THREE) }("undefined" != typeof self ? self : this, function(__WEBPACK_EXTERNAL_MODULE__0__) { return function(t) { var n = {};

        function c(e) { if (n[e]) return n[e].exports; var l = n[e] = { i: e, l: !1, exports: {} }; return t[e].call(l.exports, l, l.exports, c), l.l = !0, l.exports } return c.m = t, c.c = n, c.d = function(t, n, e) { c.o(t, n) || Object.defineProperty(t, n, { enumerable: !0, get: e }) }, c.r = function(t) { "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(t, "__esModule", { value: !0 }) }, c.t = function(t, n) { if (1 & n && (t = c(t)), 8 & n) return t; if (4 & n && "object" == typeof t && t && t.__esModule) return t; var e = Object.create(null); if (c.r(e), Object.defineProperty(e, "default", { enumerable: !0, value: t }), 2 & n && "string" != typeof t)
                for (var l in t) c.d(e, l, function(n) { return t[n] }.bind(null, l)); return e }, c.n = function(t) { var n = t && t.__esModule ? function() { return t.default } : function() { return t }; return c.d(n, "a", n), n }, c.o = function(t, n) { return Object.prototype.hasOwnProperty.call(t, n) }, c.p = "", c(c.s = 1) }([function(module, exports) { eval("module.exports = __WEBPACK_EXTERNAL_MODULE__0__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UaHJlZUR4Zi9leHRlcm5hbCBcIlRIUkVFXCI/ZmMwMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n") }, function(module, __webpack_exports__, __webpack_require__) { "use strict";
        eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: external "THREE"\nvar external_THREE_ = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/OrbitControls.js\n/**\r\n * @author qiao / https://github.com/qiao\r\n * @author mrdoob / http://mrdoob.com\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author erich666 / http://erichaines.com\r\n */\r\n/*global THREE, console */\r\n\r\n// This set of controls performs orbiting, dollying (zooming), and panning. It maintains\r\n// the "up" direction as +Y, unlike the TrackballControls. Touch on tablet and phones is\r\n// supported.\r\n//\r\n//    Orbit - left mouse / touch: one finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\r\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\r\n//\r\n// This is a drop-in replacement for (most) TrackballControls used in examples.\r\n// That is, include this js file and wherever you see:\r\n//    \tcontrols = new THREE.TrackballControls( camera );\r\n//      controls.target.z = 150;\r\n// Simple substitute "OrbitControls" and the control should work as-is.\r\n\r\n\r\n\r\nfunction OrbitControls( object, domElement ) {\r\n\r\n\tthis.object = object;\r\n\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\r\n\r\n\t// API\r\n\r\n\t// Set to false to disable this control\r\n\tthis.enabled = true;\r\n\r\n\t// "target" sets the location of focus, where the control orbits around\r\n\t// and where it pans with respect to.\r\n\tthis.target = new external_THREE_["Vector3"]();\r\n\r\n\t// center is old, deprecated; use "target" instead\r\n\tthis.center = this.target;\r\n\r\n\t// This option actually enables dollying in and out; left as "zoom" for\r\n\t// backwards compatibility\r\n\tthis.noZoom = false;\r\n\tthis.zoomSpeed = 1.0;\r\n\r\n\t// Limits to how far you can dolly in and out\r\n\tthis.minDistance = 0;\r\n\tthis.maxDistance = Infinity;\r\n\r\n\t// Set to true to disable this control\r\n\tthis.noRotate = false;\r\n\tthis.rotateSpeed = 1.0;\r\n\r\n\t// Set to true to disable this control\r\n\tthis.noPan = false;\r\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\r\n\r\n\t// Set to true to automatically rotate around the target\r\n\tthis.autoRotate = false;\r\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\r\n\r\n\t// How far you can orbit vertically, upper and lower limits.\r\n\t// Range is 0 to Math.PI radians.\r\n\tthis.minPolarAngle = 0; // radians\r\n\tthis.maxPolarAngle = Math.PI; // radians\r\n\r\n\t// Set to true to disable use of the keys\r\n\tthis.noKeys = false;\r\n\r\n\t// The four arrow keys\r\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\r\n\r\n\t////////////\r\n\t// internals\r\n\r\n\tvar scope = this;\r\n\r\n\tvar EPS = 0.000001;\r\n\r\n\tvar rotateStart = new external_THREE_["Vector2"]();\r\n\tvar rotateEnd = new external_THREE_["Vector2"]();\r\n\tvar rotateDelta = new external_THREE_["Vector2"]();\r\n\r\n\tvar panStart = new external_THREE_["Vector2"]();\r\n\tvar panEnd = new external_THREE_["Vector2"]();\r\n\tvar panDelta = new external_THREE_["Vector2"]();\r\n\tvar panOffset = new external_THREE_["Vector3"]();\r\n\r\n\tvar offset = new external_THREE_["Vector3"]();\r\n\r\n\tvar dollyStart = new external_THREE_["Vector2"]();\r\n\tvar dollyEnd = new external_THREE_["Vector2"]();\r\n\tvar dollyDelta = new external_THREE_["Vector2"]();\r\n\r\n\tvar phiDelta = 0;\r\n\tvar thetaDelta = 0;\r\n\tvar scale = 1;\r\n\tvar pan = new external_THREE_["Vector3"]();\r\n\r\n\tvar lastPosition = new external_THREE_["Vector3"]();\r\n\r\n\tvar STATE = { NONE : -1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\r\n\r\n\tvar state = STATE.NONE;\r\n\r\n\t// for reset\r\n\r\n\tthis.target0 = this.target.clone();\r\n\tthis.position0 = this.object.position.clone();\r\n\r\n\t// events\r\n\r\n\tvar changeEvent = { type: \'change\' };\r\n\tvar startEvent = { type: \'start\'};\r\n\tvar endEvent = { type: \'end\'};\r\n\r\n\tthis.rotateLeft = function ( angle ) {\r\n\r\n\t\tif ( angle === undefined ) {\r\n\r\n\t\t\tangle = getAutoRotationAngle();\r\n\r\n\t\t}\r\n\r\n\t\tthetaDelta -= angle;\r\n\r\n\t};\r\n\r\n\tthis.rotateUp = function ( angle ) {\r\n\r\n\t\tif ( angle === undefined ) {\r\n\r\n\t\t\tangle = getAutoRotationAngle();\r\n\r\n\t\t}\r\n\r\n\t\tphiDelta -= angle;\r\n\r\n\t};\r\n\r\n\t// pass in distance in world space to move left\r\n\tthis.panLeft = function ( distance ) {\r\n\r\n\t\tvar te = this.object.matrix.elements;\r\n\r\n\t\t// get X column of matrix\r\n\t\tpanOffset.set( te[ 0 ], te[ 1 ], te[ 2 ] );\r\n\t\tpanOffset.multiplyScalar( - distance );\r\n\t\t\r\n\t\tpan.add( panOffset );\r\n\r\n\t};\r\n\r\n\t// pass in distance in world space to move up\r\n\tthis.panUp = function ( distance ) {\r\n\r\n\t\tvar te = this.object.matrix.elements;\r\n\r\n\t\t// get Y column of matrix\r\n\t\tpanOffset.set( te[ 4 ], te[ 5 ], te[ 6 ] );\r\n\t\tpanOffset.multiplyScalar( distance );\r\n\t\t\r\n\t\tpan.add( panOffset );\r\n\r\n\t};\r\n\t\r\n\t// pass in x,y of change desired in pixel space,\r\n\t// right and down are positive\r\n\tthis.pan = function ( deltaX, deltaY ) {\r\n\r\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n\t\tif ( scope.object.fov !== undefined ) {\r\n\r\n\t\t\t// perspective\r\n\t\t\tvar position = scope.object.position;\r\n\t\t\tvar offset = position.clone().sub( scope.target );\r\n\t\t\tvar targetDistance = offset.length();\r\n\r\n\t\t\t// half of the fov is center to top of screen\r\n\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n\t\t\t// we actually don\'t use screenWidth, since perspective camera is fixed to screen height\r\n\t\t\tscope.panLeft( 2 * deltaX * targetDistance / element.clientHeight );\r\n\t\t\tscope.panUp( 2 * deltaY * targetDistance / element.clientHeight );\r\n\r\n\t\t} else if ( scope.object.top !== undefined ) {\r\n            \r\n\t\t\t// orthographic\r\n\t\t\tscope.panLeft( deltaX * (scope.object.right - scope.object.left) / element.clientWidth );\r\n\t\t\tscope.panUp( deltaY * (scope.object.top - scope.object.bottom) / element.clientHeight );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// camera neither orthographic or perspective\r\n\t\t\tconsole.warn( \'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.\' );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.dollyIn = function ( dollyScale ) {\r\n\r\n\t\tif ( dollyScale === undefined ) {\r\n\r\n\t\t\tdollyScale = getZoomScale();\r\n\r\n\t\t}\r\n\r\n\t\tscale /= dollyScale;\r\n\r\n\t};\r\n\r\n\tthis.dollyOut = function ( dollyScale ) {\r\n\r\n\t\tif ( dollyScale === undefined ) {\r\n\r\n\t\t\tdollyScale = getZoomScale();\r\n\r\n\t\t}\r\n\r\n\t\tscale *= dollyScale;\r\n\r\n\t};\r\n\r\n\tthis.update = function () {\r\n        \r\n        if(scope.object.top !== undefined) {\r\n            this.object.top = (scale*this.object.top);\r\n            this.object.bottom = (scale*this.object.bottom);\r\n            this.object.left = (scale*this.object.left);\r\n            this.object.right = (scale*this.object.right);\r\n            \r\n            this.object.updateProjectionMatrix();\r\n\r\n        }\r\n            \r\n\r\n\t\tvar position = this.object.position;\r\n\r\n\t\toffset.copy( position ).sub( this.target );\r\n//\r\n//\t\t// angle from z-axis around y-axis\r\n//\r\n//\t\tvar theta = Math.atan2( offset.x, offset.z );\r\n//\r\n//\t\t// angle from y-axis\r\n//\r\n//\t\tvar phi = Math.atan2( Math.sqrt( offset.x * offset.x + offset.z * offset.z ), offset.y );\r\n//\r\n//\t\tif ( this.autoRotate ) {\r\n//\r\n//\t\t\tthis.rotateLeft( getAutoRotationAngle() );\r\n//\r\n//\t\t}\r\n//\r\n//\t\ttheta += thetaDelta;\r\n//\t\tphi += phiDelta;\r\n//\r\n//\t\t// restrict phi to be between desired limits\r\n//\t\tphi = Math.max( this.minPolarAngle, Math.min( this.maxPolarAngle, phi ) );\r\n//\r\n//\t\t// restrict phi to be betwee EPS and PI-EPS\r\n//\t\tphi = Math.max( EPS, Math.min( Math.PI - EPS, phi ) );\r\n//\r\n//\t\tvar radius = offset.length() * scale;\r\n//\r\n//\t\t// restrict radius to be between desired limits\r\n//\t\tradius = Math.max( this.minDistance, Math.min( this.maxDistance, radius ) );\r\n//\t\t\r\n//\t\t// move target to panned location\r\n\t\tthis.target.add( pan );\r\n//\t\t\r\n//\t\toffset.x = radius * Math.sin( phi ) * Math.sin( theta );\r\n//\t\toffset.y = radius * Math.cos( phi );\r\n//\t\toffset.z = radius * Math.sin( phi ) * Math.cos( theta );\r\n//\r\n\t\tposition.copy( this.target ).add( offset );\r\n\r\n\t\tthis.object.lookAt( this.target );\r\n\r\n\r\n//\t\tif ( lastPosition.distanceTo( this.object.position ) > 0 || scale !== 1 ) {\r\n\r\n\t\t\tthis.dispatchEvent( changeEvent );\r\n\r\n//\t\t\tlastPosition.copy( this.object.position );\r\n\r\n//\t\t}\r\n        \r\n//        thetaDelta = 0;\r\n//\t\tphiDelta = 0;\r\n\t\tscale = 1;\r\n\t\tpan.set( 0, 0, 0 );\r\n\r\n\t};\r\n\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tstate = STATE.NONE;\r\n\r\n\t\tthis.target.copy( this.target0 );\r\n\t\tthis.object.position.copy( this.position0 );\r\n\r\n\t\tthis.update();\r\n\r\n\t};\r\n\r\n\tfunction getAutoRotationAngle() {\r\n\r\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n\t}\r\n\r\n\tfunction getZoomScale() {\r\n\r\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n\t}\r\n\r\n\tfunction onMouseDown( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\t\tevent.preventDefault();\r\n\r\n\t\tif ( event.button === 0 ) {\r\n\t\t\tif ( scope.noRotate === true ) return;\r\n\r\n\t\t\tstate = STATE.ROTATE;\r\n\r\n\t\t\trotateStart.set( event.clientX, event.clientY );\r\n\r\n\t\t} else if ( event.button === 1 ) {\r\n\t\t\tif ( scope.noZoom === true ) return;\r\n\r\n\t\t\tstate = STATE.DOLLY;\r\n\r\n\t\t\tdollyStart.set( event.clientX, event.clientY );\r\n\r\n\t\t} else if ( event.button === 2 ) {\r\n\t\t\tif ( scope.noPan === true ) return;\r\n\r\n\t\t\tstate = STATE.PAN;\r\n\r\n\t\t\tpanStart.set( event.clientX, event.clientY );\r\n\r\n\t\t}\r\n\r\n\t\tscope.domElement.addEventListener( \'mousemove\', onMouseMove, false );\r\n\t\tscope.domElement.addEventListener( \'mouseup\', onMouseUp, false );\r\n\t\tscope.dispatchEvent( startEvent );\r\n\r\n\t}\r\n\r\n\tfunction onMouseMove( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n\t\tif ( state === STATE.ROTATE ) {\r\n\r\n\t\t\tif ( scope.noRotate === true ) return;\r\n\r\n\t\t\trotateEnd.set( event.clientX, event.clientY );\r\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\r\n\r\n\t\t\t// rotating across whole screen goes 360 degrees around\r\n\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\r\n\r\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\r\n\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\r\n\r\n\t\t\trotateStart.copy( rotateEnd );\r\n\r\n\t\t} else if ( state === STATE.DOLLY ) {\r\n\r\n\t\t\tif ( scope.noZoom === true ) return;\r\n\r\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\r\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n\t\t\tif ( dollyDelta.y > 0 ) {\r\n\r\n\t\t\t\tscope.dollyIn();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tscope.dollyOut();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdollyStart.copy( dollyEnd );\r\n\r\n\t\t} else if ( state === STATE.PAN ) {\r\n\r\n\t\t\tif ( scope.noPan === true ) return;\r\n\r\n\t\t\tpanEnd.set( event.clientX, event.clientY );\r\n\t\t\tpanDelta.subVectors( panEnd, panStart );\r\n\t\t\t\r\n\t\t\tscope.pan( panDelta.x, panDelta.y );\r\n\r\n\t\t\tpanStart.copy( panEnd );\r\n\r\n\t\t}\r\n\r\n\t\tscope.update();\r\n\r\n\t}\r\n\r\n\tfunction onMouseUp( /* event */ ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tscope.domElement.removeEventListener( \'mousemove\', onMouseMove, false );\r\n\t\tscope.domElement.removeEventListener( \'mouseup\', onMouseUp, false );\r\n\t\tscope.dispatchEvent( endEvent );\r\n\t\tstate = STATE.NONE;\r\n\r\n\t}\r\n\r\n\tfunction onMouseWheel( event ) {\r\n\r\n\t\tif ( scope.enabled === false || scope.noZoom === true ) return;\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tvar delta = 0;\r\n\r\n\t\tif ( event.wheelDelta !== undefined ) { // WebKit / Opera / Explorer 9\r\n\r\n\t\t\tdelta = event.wheelDelta;\r\n\r\n\t\t} else if ( event.detail !== undefined ) { // Firefox\r\n\r\n\t\t\tdelta = - event.detail;\r\n\r\n\t\t}\r\n\r\n\t\tif ( delta > 0 ) {\r\n\r\n\t\t\tscope.dollyOut();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tscope.dollyIn();\r\n\r\n\t\t}\r\n\r\n\t\tscope.update();\r\n\t\tscope.dispatchEvent( startEvent );\r\n\t\tscope.dispatchEvent( endEvent );\r\n\r\n\t}\r\n\r\n\tfunction onKeyDown( event ) {\r\n\r\n\t\tif ( scope.enabled === false || scope.noKeys === true || scope.noPan === true ) return;\r\n\t\t\r\n\t\tswitch ( event.keyCode ) {\r\n\r\n\t\t\tcase scope.keys.UP:\r\n\t\t\t\tscope.pan( 0, scope.keyPanSpeed );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase scope.keys.BOTTOM:\r\n\t\t\t\tscope.pan( 0, - scope.keyPanSpeed );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase scope.keys.LEFT:\r\n\t\t\t\tscope.pan( scope.keyPanSpeed, 0 );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase scope.keys.RIGHT:\r\n\t\t\t\tscope.pan( - scope.keyPanSpeed, 0 );\r\n\t\t\t\tscope.update();\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction touchstart( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tswitch ( event.touches.length ) {\r\n\r\n\t\t\tcase 1:\t// one-fingered touch: rotate\r\n\r\n\t\t\t\tif ( scope.noRotate === true ) return;\r\n\r\n\t\t\t\tstate = STATE.TOUCH_ROTATE;\r\n\r\n\t\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2:\t// two-fingered touch: dolly\r\n\r\n\t\t\t\tif ( scope.noZoom === true ) return;\r\n\r\n\t\t\t\tstate = STATE.TOUCH_DOLLY;\r\n\r\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\r\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\r\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\r\n\t\t\t\tdollyStart.set( 0, distance );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 3: // three-fingered touch: pan\r\n\r\n\t\t\t\tif ( scope.noPan === true ) return;\r\n\r\n\t\t\t\tstate = STATE.TOUCH_PAN;\r\n\r\n\t\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tstate = STATE.NONE;\r\n\r\n\t\t}\r\n\r\n\t\tscope.dispatchEvent( startEvent );\r\n\r\n\t}\r\n\r\n\tfunction touchmove( event ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tevent.preventDefault();\r\n\t\tevent.stopPropagation();\r\n\r\n\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\r\n\r\n\t\tswitch ( event.touches.length ) {\r\n\r\n\t\t\tcase 1: // one-fingered touch: rotate\r\n\r\n\t\t\t\tif ( scope.noRotate === true ) return;\r\n\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return;\r\n\r\n\t\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n\t\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\r\n\r\n\t\t\t\t// rotating across whole screen goes 360 degrees around\r\n\t\t\t\tscope.rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\r\n\t\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\r\n\t\t\t\tscope.rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\r\n\r\n\t\t\t\trotateStart.copy( rotateEnd );\r\n\r\n\t\t\t\tscope.update();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 2: // two-fingered touch: dolly\r\n\r\n\t\t\t\tif ( scope.noZoom === true ) return;\r\n\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return;\r\n\r\n\t\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\r\n\t\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\r\n\t\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n\t\t\t\tdollyEnd.set( 0, distance );\r\n\t\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n\t\t\t\tif ( dollyDelta.y > 0 ) {\r\n\r\n\t\t\t\t\tscope.dollyOut();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tscope.dollyIn();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdollyStart.copy( dollyEnd );\r\n\r\n\t\t\t\tscope.update();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 3: // three-fingered touch: pan\r\n\r\n\t\t\t\tif ( scope.noPan === true ) return;\r\n\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return;\r\n\r\n\t\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\r\n\t\t\t\tpanDelta.subVectors( panEnd, panStart );\r\n\t\t\t\t\r\n\t\t\t\tscope.pan( panDelta.x, panDelta.y );\r\n\r\n\t\t\t\tpanStart.copy( panEnd );\r\n\r\n\t\t\t\tscope.update();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tstate = STATE.NONE;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction touchend( /* event */ ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\r\n\t\tscope.dispatchEvent( endEvent );\r\n\t\tstate = STATE.NONE;\r\n\r\n\t}\r\n\r\n\tthis.domElement.addEventListener( \'contextmenu\', function ( event ) { event.preventDefault(); }, false );\r\n\tthis.domElement.addEventListener( \'mousedown\', onMouseDown, false );\r\n\tthis.domElement.addEventListener( \'mousewheel\', onMouseWheel, false );\r\n\tthis.domElement.addEventListener( \'DOMMouseScroll\', onMouseWheel, false ); // firefox\r\n\r\n\tthis.domElement.addEventListener( \'touchstart\', touchstart, false );\r\n\tthis.domElement.addEventListener( \'touchend\', touchend, false );\r\n\tthis.domElement.addEventListener( \'touchmove\', touchmove, false );\r\n\r\n\twindow.addEventListener( \'keydown\', onKeyDown, false );\r\n\r\n};\r\n\r\nOrbitControls.prototype = Object.create( external_THREE_["EventDispatcher"].prototype );\n// CONCATENATED MODULE: ./src/index.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Viewer", function() { return Viewer; });\n\r\n\r\n\r\n// Three.js extension functions. Webpack doesn\'t seem to like it if we modify the THREE object directly.\r\nvar THREEx = { Math: {} };\r\n/**\r\n * Returns the angle in radians of the vector (p1,p2). In other words, imagine\r\n * putting the base of the vector at coordinates (0,0) and finding the angle\r\n * from vector (1,0) to (p1,p2).\r\n * @param  {Object} p1 start point of the vector\r\n * @param  {Object} p2 end point of the vector\r\n * @return {Number} the angle\r\n */\r\nTHREEx.Math.angle2 = function(p1, p2) {\r\n\tvar v1 = new external_THREE_["Vector2"](p1.x, p1.y);\r\n\tvar v2 = new external_THREE_["Vector2"](p2.x, p2.y);\r\n\tv2.sub(v1); // sets v2 to be our chord\r\n\tv2.normalize();\r\n\tif(v2.y < 0) return -Math.acos(v2.x);\r\n\treturn Math.acos(v2.x);\r\n};\r\n\r\n\r\nTHREEx.Math.polar = function(point, distance, angle) {\r\n\tvar result = {};\r\n\tresult.x = point.x + distance * Math.cos(angle);\r\n\tresult.y = point.y + distance * Math.sin(angle);\r\n\treturn result;\r\n};\r\n\r\n/**\r\n * Calculates points for a curve between two points\r\n * @param startPoint - the starting point of the curve\r\n * @param endPoint - the ending point of the curve\r\n * @param bulge - a value indicating how much to curve\r\n * @param segments - number of segments between the two given points\r\n */\r\nTHREEx.BulgeGeometry = function ( startPoint, endPoint, bulge, segments ) {\r\n\r\n\tvar vertex, i,\r\n\t\tcenter, p0, p1, angle,\r\n\t\tradius, startAngle,\r\n\t\tthetaAngle;\r\n\r\n\texternal_THREE_["Geometry"].call( this );\r\n\r\n\tthis.startPoint = p0 = startPoint ? new external_THREE_["Vector2"](startPoint.x, startPoint.y) : new external_THREE_["Vector2"](0,0);\r\n\tthis.endPoint = p1 = endPoint ? new external_THREE_["Vector2"](endPoint.x, endPoint.y) : new external_THREE_["Vector2"](1,0);\r\n\tthis.bulge = bulge = bulge || 1;\r\n\r\n\tangle = 4 * Math.atan(bulge);\r\n\tradius = p0.distanceTo(p1) / 2 / Math.sin(angle/2);\r\n\tcenter = THREEx.Math.polar(startPoint, radius, THREEx.Math.angle2(p0,p1) + (Math.PI / 2 - angle/2));\r\n\r\n\tthis.segments = segments = segments || Math.max( Math.abs(Math.ceil(angle/(Math.PI/18))), 6); // By default want a segment roughly every 10 degrees\r\n\tstartAngle = THREEx.Math.angle2(center, p0);\r\n\tthetaAngle = angle / segments;\r\n\r\n\r\n\tthis.vertices.push(new external_THREE_["Vector3"](p0.x, p0.y, 0));\r\n\r\n\tfor(i = 1; i <= segments - 1; i++) {\r\n\r\n\t\tvertex = THREEx.Math.polar(center, Math.abs(radius), startAngle + thetaAngle * i);\r\n\r\n\t\tthis.vertices.push(new external_THREE_["Vector3"](vertex.x, vertex.y, 0));\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREEx.BulgeGeometry.prototype = Object.create( external_THREE_["Geometry"].prototype );\r\n    \r\n/**\r\n * Viewer class for a dxf object.\r\n * @param {Object} data - the dxf object\r\n * @param {Object} parent - the parent element to which we attach the rendering canvas\r\n * @param {Number} width - width of the rendering canvas in pixels\r\n * @param {Number} height - height of the rendering canvas in pixels\r\n * @param {Object} font - a font loaded with THREE.FontLoader \r\n * @constructor\r\n */\r\nfunction Viewer(data, parent, width, height, font) {\r\n\r\n    createLineTypeShaders(data);\r\n\r\n    var scene = new external_THREE_["Scene"]();\r\n\r\n    // Create scene from dxf object (data)\r\n    var i, entity, obj, min_x, min_y, min_z, max_x, max_y, max_z;\r\n    var dims = {\r\n        min: { x: false, y: false, z: false},\r\n        max: { x: false, y: false, z: false}\r\n    };\r\n    for(i = 0; i < data.entities.length; i++) {\r\n        entity = data.entities[i];\r\n        obj = drawEntity(entity, data);\r\n\r\n        if (obj) {\r\n            var bbox = new external_THREE_["Box3"]().setFromObject(obj);\r\n            if (bbox.min.x && ((dims.min.x === false) || (dims.min.x > bbox.min.x))) dims.min.x = bbox.min.x;\r\n            if (bbox.min.y && ((dims.min.y === false) || (dims.min.y > bbox.min.y))) dims.min.y = bbox.min.y;\r\n            if (bbox.min.z && ((dims.min.z === false) || (dims.min.z > bbox.min.z))) dims.min.z = bbox.min.z;\r\n            if (bbox.max.x && ((dims.max.x === false) || (dims.max.x < bbox.max.x))) dims.max.x = bbox.max.x;\r\n            if (bbox.max.y && ((dims.max.y === false) || (dims.max.y < bbox.max.y))) dims.max.y = bbox.max.y;\r\n            if (bbox.max.z && ((dims.max.z === false) || (dims.max.z < bbox.max.z))) dims.max.z = bbox.max.z;\r\n            scene.add(obj);\r\n        }\r\n        obj = null;\r\n    }\r\n\r\n    width = width || parent.innerWidth;\r\n    height = height || parent.innerHeight;\r\n    var aspectRatio = width / height;\r\n\r\n    var upperRightCorner = { x: dims.max.x, y: dims.max.y };\r\n    var lowerLeftCorner = { x: dims.min.x, y: dims.min.y };\r\n\r\n    // Figure out the current viewport extents\r\n    var vp_width = upperRightCorner.x - lowerLeftCorner.x;\r\n    var vp_height = upperRightCorner.y - lowerLeftCorner.y;\r\n    var center = center || {\r\n        x: vp_width / 2 + lowerLeftCorner.x,\r\n        y: vp_height / 2 + lowerLeftCorner.y\r\n    };\r\n\r\n    // Fit all objects into current ThreeDXF viewer\r\n    var extentsAspectRatio = Math.abs(vp_width / vp_height);\r\n    if (aspectRatio > extentsAspectRatio) {\r\n        vp_width = vp_height * aspectRatio;\r\n    } else {\r\n        vp_height = vp_width / aspectRatio;\r\n    }\r\n    \r\n    var viewPort = {\r\n        bottom: -vp_height / 2,\r\n        left: -vp_width / 2,\r\n        top: vp_height / 2,\r\n        right: vp_width / 2,\r\n        center: {\r\n            x: center.x,\r\n            y: center.y\r\n        }\r\n    };\r\n\r\n    var camera = new external_THREE_["OrthographicCamera"](viewPort.left, viewPort.right, viewPort.top, viewPort.bottom, 1, 19);\r\n    camera.position.z = 10;\r\n    camera.position.x = viewPort.center.x;\r\n    camera.position.y = viewPort.center.y;\r\n\r\n    var renderer = this.renderer = new external_THREE_["WebGLRenderer"]();\r\n    renderer.setSize(width, height);\r\n    renderer.setClearColor(0xfffffff, 1);\r\n\r\n    parent.appendChild(renderer.domElement);\r\n    parent.style.display = \'block\';\r\n\r\n    //TODO: Need to make this an option somehow so others can roll their own controls.\r\n    var controls = new OrbitControls(camera, parent);\r\n    controls.target.x = camera.position.x;\r\n    controls.target.y = camera.position.y;\r\n    controls.target.z = 0;\r\n    controls.zoomSpeed = 3;\r\n\r\n    //Uncomment this to disable rotation (does not make much sense with 2D drawings).\r\n    //controls.enableRotate = false;\r\n\r\n    this.render = function() { renderer.render(scene, camera) };\r\n    controls.addEventListener(\'change\', this.render);\r\n    this.render();\r\n    controls.update();\r\n\r\n    this.resize = function(width, height) {\r\n        var originalWidth = renderer.domElement.width;\r\n        var originalHeight = renderer.domElement.height;\r\n\r\n        var hscale = width / originalWidth;\r\n        var vscale = height / originalHeight;\r\n\r\n\r\n        camera.top = (vscale * camera.top);\r\n        camera.bottom = (vscale * camera.bottom);\r\n        camera.left = (hscale * camera.left);\r\n        camera.right = (hscale * camera.right);\r\n\r\n//        camera.updateProjectionMatrix();\r\n\r\n        renderer.setSize(width, height);\r\n        renderer.setClearColor(0xfffffff, 1);\r\n        this.render();\r\n    };\r\n\r\n    function drawEntity(entity, data) {\r\n        var mesh;\r\n        if(entity.type === \'CIRCLE\' || entity.type === \'ARC\') {\r\n            mesh = drawArc(entity, data);\r\n        } else if(entity.type === \'LWPOLYLINE\' || entity.type === \'LINE\' || entity.type === \'POLYLINE\') {\r\n            mesh = drawLine(entity, data);\r\n        } else if(entity.type === \'TEXT\') {\r\n            mesh = drawText(entity, data);\r\n        } else if(entity.type === \'SOLID\') {\r\n            mesh = drawSolid(entity, data);\r\n        } else if(entity.type === \'POINT\') {\r\n            mesh = drawPoint(entity, data);\r\n        } else if(entity.type === \'INSERT\') {\r\n            mesh = drawBlock(entity, data);\r\n        } else if(entity.type === \'SPLINE\') {\r\n            mesh = drawSpline(entity, data);\r\n        } else if(entity.type === \'MTEXT\') {\r\n            mesh = drawMtext(entity, data);\r\n        } else if(entity.type === \'ELLIPSE\') {\r\n            mesh = drawEllipse(entity, data);\r\n        } else if(entity.type === \'DIMENSION\') {\r\n            var dimTypeEnum = entity.dimensionType & 7;\r\n            if(dimTypeEnum === 0) {\r\n                mesh = drawDimension(entity, data);\r\n            } else {\r\n                console.log("Unsupported Dimension type: " + dimTypeEnum);\r\n            }\r\n        }\r\n        else {\r\n            console.log("Unsupported Entity Type: " + entity.type);\r\n        }\r\n        return mesh;\r\n    }\r\n\r\n    function drawEllipse(entity, data) {\r\n        var color = getColor(entity, data);\r\n\r\n        var xrad = Math.sqrt(Math.pow(entity.majorAxisEndPoint.x,2) + Math.pow(entity.majorAxisEndPoint.y,2));\r\n        var yrad = xrad*entity.axisRatio;\r\n        var rotation = Math.atan2(entity.majorAxisEndPoint.y, entity.majorAxisEndPoint.x);\r\n\r\n        var curve = new external_THREE_["EllipseCurve"](\r\n            entity.center.x,  entity.center.y,\r\n            xrad, yrad,\r\n            entity.startAngle, entity.endAngle,\r\n            false, // Always counterclockwise\r\n            rotation\r\n        );\r\n\r\n        var points = curve.getPoints( 50 );\r\n        var geometry = new external_THREE_["BufferGeometry"]().setFromPoints( points );\r\n        var material = new external_THREE_["LineBasicMaterial"]( {  linewidth: 1, color : color } );\r\n\r\n        // Create the final object to add to the scene\r\n        var ellipse = new external_THREE_["Line"]( geometry, material );\r\n        return ellipse;\r\n    }\r\n\r\n    function drawMtext(entity, data) {\r\n        var color = getColor(entity, data);\r\n\r\n        var geometry = new external_THREE_["TextGeometry"]( entity.text, {\r\n            font: font,\r\n            size: entity.height * (4/5),\r\n            height: 1\r\n        });\r\n        var material = new external_THREE_["MeshBasicMaterial"]( {color: color} );\r\n        var text = new external_THREE_["Mesh"]( geometry, material );\r\n\r\n        // Measure what we rendered.\r\n        var measure = new external_THREE_["Box3"]();\r\n        measure.setFromObject( text );\r\n\r\n        var textWidth  = measure.max.x - measure.min.x;\r\n\r\n        // If the text ends up being wider than the box, it\'s supposed\r\n        // to be multiline. Doing that in threeJS is overkill.\r\n        if (textWidth > entity.width) {\r\n            console.log("Can\'t render this multipline MTEXT entity, sorry.", entity);\r\n            return undefined;\r\n        }\r\n\r\n        text.position.z = 0;\r\n        switch (entity.attachmentPoint) {\r\n            case 1:\r\n                // Top Left\r\n                text.position.x = entity.position.x;\r\n                text.position.y = entity.position.y - entity.height;\r\n            break;\r\n            case 2:\r\n                // Top Center\r\n                text.position.x = entity.position.x - textWidth/2;\r\n                text.position.y = entity.position.y - entity.height;\r\n            break;\r\n            case 3:\r\n                // Top Right\r\n                text.position.x = entity.position.x - textWidth;\r\n                text.position.y = entity.position.y - entity.height;\r\n            break;\r\n\r\n            case 4:\r\n                // Middle Left\r\n                text.position.x = entity.position.x;\r\n                text.position.y = entity.position.y - entity.height/2;\r\n            break;\r\n            case 5:\r\n                // Middle Center\r\n                text.position.x = entity.position.x - textWidth/2;\r\n                text.position.y = entity.position.y - entity.height/2;\r\n            break;\r\n            case 6:\r\n                // Middle Right\r\n                text.position.x = entity.position.x - textWidth;\r\n                text.position.y = entity.position.y - entity.height/2;\r\n            break;\r\n\r\n            case 7:\r\n                // Bottom Left\r\n                text.position.x = entity.position.x;\r\n                text.position.y = entity.position.y;\r\n            break;\r\n            case 8:\r\n                // Bottom Center\r\n                text.position.x = entity.position.x - textWidth/2;\r\n                text.position.y = entity.position.y;\r\n            break;\r\n            case 9:\r\n                // Bottom Right\r\n                text.position.x = entity.position.x - textWidth;\r\n                text.position.y = entity.position.y;\r\n            break;\r\n\r\n            default:\r\n                return undefined;\r\n        };\r\n\r\n        return text;\r\n    }\r\n\r\n    function drawSpline(entity, data) {\r\n        var color = getColor(entity, data);\r\n\r\n        var points = entity.controlPoints.map(function(vec) {\r\n            return new external_THREE_["Vector2"](vec.x, vec.y);\r\n        });\r\n\r\n        var interpolatedPoints = [];\r\n        var curve;\r\n        if (entity.degreeOfSplineCurve === 2 || entity.degreeOfSplineCurve === 3) {\r\n            for(var i = 0; i + 2 < points.length; i = i + 2) {\r\n        if (entity.degreeOfSplineCurve === 2) {\r\n                        curve = new external_THREE_["QuadraticBezierCurve"](points[i], points[i + 1], points[i + 2]);\r\n        } else {\r\n            curve = new external_THREE_["QuadraticBezierCurve3"](points[i], points[i + 1], points[i + 2]);\r\n        }\r\n                interpolatedPoints.push.apply(interpolatedPoints, curve.getPoints(50));\r\n            }\r\n        } else {\r\n            curve = new external_THREE_["SplineCurve"](points);\r\n            interpolatedPoints = curve.getPoints( 100 );\r\n        }\r\n\r\n        var geometry = new external_THREE_["BufferGeometry"]().setFromPoints( interpolatedPoints );\r\n        var material = new external_THREE_["LineBasicMaterial"]( { linewidth: 1, color : color } );\r\n        var splineObject = new external_THREE_["Line"]( geometry, material );\r\n\r\n        return splineObject;\r\n    }\r\n\r\n    function drawLine(entity, data) {\r\n        var geometry = new external_THREE_["Geometry"](),\r\n            color = getColor(entity, data),\r\n            material, lineType, vertex, startPoint, endPoint, bulgeGeometry,\r\n            bulge, i, line;\r\n\r\n        // create geometry\r\n        for(i = 0; i < entity.vertices.length; i++) {\r\n\r\n            if(entity.vertices[i].bulge) {\r\n                bulge = entity.vertices[i].bulge;\r\n                startPoint = entity.vertices[i];\r\n                endPoint = i + 1 < entity.vertices.length ? entity.vertices[i + 1] : geometry.vertices[0];\r\n\r\n                bulgeGeometry = new THREEx.BulgeGeometry(startPoint, endPoint, bulge);\r\n\r\n                geometry.vertices.push.apply(geometry.vertices, bulgeGeometry.vertices);\r\n            } else {\r\n                vertex = entity.vertices[i];\r\n                geometry.vertices.push(new external_THREE_["Vector3"](vertex.x, vertex.y, 0));\r\n            }\r\n\r\n        }\r\n        if(entity.shape) geometry.vertices.push(geometry.vertices[0]);\r\n\r\n\r\n        // set material\r\n        if(entity.lineType) {\r\n            lineType = data.tables.lineType.lineTypes[entity.lineType];\r\n        }\r\n\r\n        if(lineType && lineType.pattern && lineType.pattern.length !== 0) {\r\n            material = new external_THREE_["LineDashedMaterial"]({ color: color, gapSize: 4, dashSize: 4});\r\n        } else {\r\n            material = new external_THREE_["LineBasicMaterial"]({ linewidth: 1, color: color });\r\n        }\r\n\r\n        // if(lineType && lineType.pattern && lineType.pattern.length !== 0) {\r\n\r\n        //           geometry.computeLineDistances();\r\n\r\n        //           // Ugly hack to add diffuse to this. Maybe copy the uniforms object so we\r\n        //           // don\'t add diffuse to a material.\r\n        //           lineType.material.uniforms.diffuse = { type: \'c\', value: new THREE.Color(color) };\r\n\r\n        // \tmaterial = new THREE.ShaderMaterial({\r\n        // \t\tuniforms: lineType.material.uniforms,\r\n        // \t\tvertexShader: lineType.material.vertexShader,\r\n        // \t\tfragmentShader: lineType.material.fragmentShader\r\n        // \t});\r\n        // }else {\r\n        // \tmaterial = new THREE.LineBasicMaterial({ linewidth: 1, color: color });\r\n        // }\r\n\r\n        line = new external_THREE_["Line"](geometry, material);\r\n        return line;\r\n    }\r\n    \r\n    function drawArc(entity, data) {\r\n        var startAngle, endAngle;\r\n        if (entity.type === \'CIRCLE\') {\r\n            startAngle = entity.startAngle || 0;\r\n            endAngle = startAngle + 2 * Math.PI;\r\n        } else {\r\n            startAngle = entity.startAngle;\r\n            endAngle = entity.endAngle;\r\n        }\r\n\r\n        var curve = new external_THREE_["ArcCurve"](\r\n            0, 0,\r\n            entity.radius,\r\n            startAngle,\r\n            endAngle);\r\n\r\n        var points = curve.getPoints( 32 );\r\n        var geometry = new external_THREE_["BufferGeometry"]().setFromPoints( points );\r\n\r\n        var material = new external_THREE_["LineBasicMaterial"]({ color: getColor(entity, data) });\r\n\r\n        var arc = new external_THREE_["Line"](geometry, material);\r\n        arc.position.x = entity.center.x;\r\n        arc.position.y = entity.center.y;\r\n        arc.position.z = entity.center.z;\r\n\r\n        return arc;\r\n    }\r\n\r\n    function drawSolid(entity, data) {\r\n        var material, mesh, verts,\r\n            geometry = new external_THREE_["Geometry"]();\r\n\r\n        verts = geometry.vertices;\r\n        verts.push(new external_THREE_["Vector3"](entity.points[0].x, entity.points[0].y, entity.points[0].z));\r\n        verts.push(new external_THREE_["Vector3"](entity.points[1].x, entity.points[1].y, entity.points[1].z));\r\n        verts.push(new external_THREE_["Vector3"](entity.points[2].x, entity.points[2].y, entity.points[2].z));\r\n        verts.push(new external_THREE_["Vector3"](entity.points[3].x, entity.points[3].y, entity.points[3].z));\r\n\r\n        // Calculate which direction the points are facing (clockwise or counter-clockwise)\r\n        var vector1 = new external_THREE_["Vector3"]();\r\n        var vector2 = new external_THREE_["Vector3"]();\r\n        vector1.subVectors(verts[1], verts[0]);\r\n        vector2.subVectors(verts[2], verts[0]);\r\n        vector1.cross(vector2);\r\n\r\n        // If z < 0 then we must draw these in reverse order\r\n        if(vector1.z < 0) {\r\n            geometry.faces.push(new external_THREE_["Face3"](2, 1, 0));\r\n            geometry.faces.push(new external_THREE_["Face3"](2, 3, 1));\r\n        } else {\r\n            geometry.faces.push(new external_THREE_["Face3"](0, 1, 2));\r\n            geometry.faces.push(new external_THREE_["Face3"](1, 3, 2));\r\n        }\r\n\r\n\r\n        material = new external_THREE_["MeshBasicMaterial"]({ color: getColor(entity, data) });\r\n\r\n        return new external_THREE_["Mesh"](geometry, material);\r\n        \r\n    }\r\n\r\n    function drawText(entity, data) {\r\n        var geometry, material, text;\r\n\r\n        if(!font)\r\n            return console.warn(\'Text is not supported without a Three.js font loaded with THREE.FontLoader! Load a font of your choice and pass this into the constructor. See the sample for this repository or Three.js examples at http://threejs.org/examples/?q=text#webgl_geometry_text for more details.\');\r\n        \r\n        geometry = new external_THREE_["TextGeometry"](entity.text, { font: font, height: 0, size: entity.textHeight || 12 });\r\n\r\n        if (entity.rotation) {\r\n            var zRotation = entity.rotation * Math.PI / 180;\r\n            geometry.rotateZ(zRotation);\r\n        }\r\n\r\n        material = new external_THREE_["MeshBasicMaterial"]({ color: getColor(entity, data) });\r\n\r\n        text = new external_THREE_["Mesh"](geometry, material);\r\n        text.position.x = entity.startPoint.x;\r\n        text.position.y = entity.startPoint.y;\r\n        text.position.z = entity.startPoint.z;\r\n\r\n        return text;\r\n    }\r\n\r\n    function drawPoint(entity, data) {\r\n        var geometry, material, point;\r\n\r\n        geometry = new external_THREE_["Geometry"]();\r\n\r\n        geometry.vertices.push(new external_THREE_["Vector3"](entity.position.x, entity.position.y, entity.position.z));\r\n\r\n        // TODO: could be more efficient. PointCloud per layer?\r\n\r\n        var numPoints = 1;\r\n\r\n        var color = getColor(entity, data);\r\n        var colors = new Float32Array( numPoints*3 );\r\n        colors[0] = color.r;\r\n        colors[1] = color.g;\r\n        colors[2] = color.b;\r\n\r\n        geometry.colors = colors;\r\n        geometry.computeBoundingBox();\r\n\r\n        material = new external_THREE_["PointsMaterial"]( { size: 0.05, vertexColors: external_THREE_["VertexColors"] } );\r\n        point = new external_THREE_["Points"](geometry, material);\r\n        scene.add(point);\r\n    }\r\n\r\n    function drawDimension(entity, data) {\r\n        var block = data.blocks[entity.block];\r\n\r\n        if (!block || !block.entities) return null;\r\n\r\n        var group = new external_THREE_["Object3D"]();\r\n        // if(entity.anchorPoint) {\r\n        //     group.position.x = entity.anchorPoint.x;\r\n        //     group.position.y = entity.anchorPoint.y;\r\n        //     group.position.z = entity.anchorPoint.z;\r\n        // }\r\n\r\n        for(var i = 0; i < block.entities.length; i++) {\r\n            var childEntity = drawEntity(block.entities[i], data, group);\r\n            if(childEntity) group.add(childEntity);\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    function drawBlock(entity, data) {\r\n        var block = data.blocks[entity.name];\r\n        \r\n        if (!block.entities) return null;\r\n\r\n        var group = new external_THREE_["Object3D"]()\r\n        \r\n        if(entity.xScale) group.scale.x = entity.xScale;\r\n        if(entity.yScale) group.scale.y = entity.yScale;\r\n\r\n        if(entity.rotation) {\r\n            group.rotation.z = entity.rotation * Math.PI / 180;\r\n        }\r\n\r\n        if(entity.position) {\r\n            group.position.x = entity.position.x;\r\n            group.position.y = entity.position.y;\r\n            group.position.z = entity.position.z;\r\n        }\r\n        \r\n        for(var i = 0; i < block.entities.length; i++) {\r\n            var childEntity = drawEntity(block.entities[i], data, group);\r\n            if(childEntity) group.add(childEntity);\r\n        }\r\n\r\n        return group;\r\n    }\r\n\r\n    function getColor(entity, data) {\r\n        var color = 0x000000; //default\r\n        if(entity.color) color = entity.color;\r\n        else if(data.tables && data.tables.layer && data.tables.layer.layers[entity.layer])\r\n            color = data.tables.layer.layers[entity.layer].color;\r\n            \r\n        if(color == null || color === 0xffffff) {\r\n            color = 0x000000;\r\n        }\r\n        return color;\r\n    }\r\n\r\n    function createLineTypeShaders(data) {\r\n        var ltype, type;\r\n        if(!data.tables || !data.tables.lineType) return;\r\n        var ltypes = data.tables.lineType.lineTypes;\r\n\r\n        for(type in ltypes) {\r\n            ltype = ltypes[type];\r\n            if(!ltype.pattern) continue;\r\n            ltype.material = createDashedLineShader(ltype.pattern);\r\n        }\r\n    }\r\n\r\n    function createDashedLineShader(pattern) {\r\n        var i,\r\n            dashedLineShader = {},\r\n            totalLength = 0.0;\r\n\r\n        for(i = 0; i < pattern.length; i++) {\r\n            totalLength += Math.abs(pattern[i]);\r\n        }\r\n\r\n        dashedLineShader.uniforms = external_THREE_["UniformsUtils"].merge([\r\n\r\n            external_THREE_["UniformsLib"][ \'common\' ],\r\n            external_THREE_["UniformsLib"][ \'fog\' ],\r\n\r\n            {\r\n                \'pattern\': { type: \'fv1\', value: pattern },\r\n                \'patternLength\': { type: \'f\', value: totalLength }\r\n            }\r\n\r\n        ]);\r\n\r\n        dashedLineShader.vertexShader = [\r\n            \'attribute float lineDistance;\',\r\n\r\n            \'varying float vLineDistance;\',\r\n\r\n            external_THREE_["ShaderChunk"][ \'color_pars_vertex\' ],\r\n\r\n            \'void main() {\',\r\n\r\n            external_THREE_["ShaderChunk"][ \'color_vertex\' ],\r\n\r\n            \'vLineDistance = lineDistance;\',\r\n\r\n            \'gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\',\r\n\r\n            \'}\'\r\n        ].join(\'\\n\');\r\n\r\n        dashedLineShader.fragmentShader = [\r\n            \'uniform vec3 diffuse;\',\r\n            \'uniform float opacity;\',\r\n\r\n            \'uniform float pattern[\' + pattern.length + \'];\',\r\n            \'uniform float patternLength;\',\r\n\r\n            \'varying float vLineDistance;\',\r\n\r\n            external_THREE_["ShaderChunk"][ \'color_pars_fragment\' ],\r\n            external_THREE_["ShaderChunk"][ \'fog_pars_fragment\' ],\r\n\r\n            \'void main() {\',\r\n\r\n            \'float pos = mod(vLineDistance, patternLength);\',\r\n\r\n            \'for ( int i = 0; i < \' + pattern.length + \'; i++ ) {\',\r\n            \'pos = pos - abs(pattern[i]);\',\r\n            \'if( pos < 0.0 ) {\',\r\n            \'if( pattern[i] > 0.0 ) {\',\r\n            \'gl_FragColor = vec4(1.0, 0.0, 0.0, opacity );\',\r\n            \'break;\',\r\n            \'}\',\r\n            \'discard;\',\r\n            \'}\',\r\n\r\n            \'}\',\r\n\r\n            external_THREE_["ShaderChunk"][ \'color_fragment\' ],\r\n            external_THREE_["ShaderChunk"][ \'fog_fragment\' ],\r\n\r\n            \'}\'\r\n        ].join(\'\\n\');\r\n\r\n        return dashedLineShader;\r\n    }\r\n\r\n    function findExtents(scene) { \r\n        for(var child of scene.children) {\r\n            var minX, maxX, minY, maxY;\r\n            if(child.position) {\r\n                minX = Math.min(child.position.x, minX);\r\n                minY = Math.min(child.position.y, minY);\r\n                maxX = Math.max(child.position.x, maxX);\r\n                maxY = Math.max(child.position.y, maxY);\r\n            }\r\n        }\r\n\r\n        return { min: { x: minX, y: minY }, max: { x: maxX, y: maxY }};\r\n    }\r\n\r\n}\r\n\r\n\r\n// Show/Hide helpers from https://plainjs.com/javascript/effects/hide-or-show-an-element-42/\r\n// get the default display style of an element\r\nfunction defaultDisplay(tag) {\r\n    var iframe = document.createElement(\'iframe\');\r\n    iframe.setAttribute(\'frameborder\', 0);\r\n    iframe.setAttribute(\'width\', 0);\r\n    iframe.setAttribute(\'height\', 0);\r\n    document.documentElement.appendChild(iframe);\r\n\r\n    var doc = (iframe.contentWindow || iframe.contentDocument).document;\r\n\r\n    // IE support\r\n    doc.write();\r\n    doc.close();\r\n\r\n    var testEl = doc.createElement(tag);\r\n    doc.documentElement.appendChild(testEl);\r\n    var display = (window.getComputedStyle ? getComputedStyle(testEl, null) : testEl.currentStyle).display\r\n    iframe.parentNode.removeChild(iframe);\r\n    return display;\r\n}\r\n\r\n// actual show/hide function used by show() and hide() below\r\nfunction showHide(el, show) {\r\n    var value = el.getAttribute(\'data-olddisplay\'),\r\n    display = el.style.display,\r\n    computedDisplay = (window.getComputedStyle ? getComputedStyle(el, null) : el.currentStyle).display;\r\n\r\n    if (show) {\r\n        if (!value && display === \'none\') el.style.display = \'\';\r\n        if (el.style.display === \'\' && (computedDisplay === \'none\')) value = value || defaultDisplay(el.nodeName);\r\n    } else {\r\n        if (display && display !== \'none\' || !(computedDisplay == \'none\'))\r\n            el.setAttribute(\'data-olddisplay\', (computedDisplay == \'none\') ? display : computedDisplay);\r\n    }\r\n    if (!show || el.style.display === \'none\' || el.style.display === \'\')\r\n        el.style.display = show ? value || \'\' : \'none\';\r\n}\r\n\r\n// helper functions\r\nfunction show(el) { showHide(el, true); }\r\nfunction hide(el) { showHide(el); }\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n') }]) });